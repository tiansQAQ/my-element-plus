@use 'sass:math';
@use 'sass:map';
// @use 'sass:color';
@use 'config' as *;
@use 'function' as *;

// BEM
@mixin b($block) {
  $B: $namespace + $common-separator + $block !global;

  .#{$B} {
    @content;
  }
}

@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: '';
  @each $unit in $element {
    $currentSelector: #{$currentSelector + '.' + $B + $element-separator + $unit + ','};
  }

  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + $selector + $modifier-separator + $unit + ','};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

/*
   --el-$name-$attribute: $value
*/
@mixin set-component-css-var($name, $variables) {
  @each $attribute, $value in $variables {
    @if $attribute == 'default' {
      #{getCssVarName($name)}: #{$value};
    } @else {
      #{getCssVarName($name, $attribute)}: #{$value};
    }
  }
}

// @include set-css-var-value(('color', 'primary'), red);
// --el-color-primary: red;
@mixin set-css-var-value($name, $value) {
  #{joinVarName($name)}: #{$value};
}

/*  button mixins */

@mixin button-size($padding-vertical, $padding-horizontal, $font-size, $border-radius) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  border-radius: $border-radius;
  &.is-round {
    padding: $padding-vertical $padding-horizontal;
  }
}

@mixin button-plain($type) {
  $button-color-types: (
    '': (
      'text-color': (
        'color',
        $type
      ),
      'bg-color': (
        'color',
        $type,
        'light-9'
      ),
      'border-color': (
        'color',
        $type,
        'light-5'
      )
    ),
    'hover': (
      'text-color': (
        'color',
        'white'
      ),
      'bg-color': (
        'color',
        $type
      ),
      'border-color': (
        'color',
        $type
      )
    ),
    'active': (
      'text-color': (
        'color',
        'white'
      )
    )
  );

  @each $type, $typeMap in $button-color-types {
    @each $typeColor, $list in $typeMap {
      @include css-var-from-global(('button', $type, $typeColor), $list);
    }
  }

  &.is-disabled {
    &,
    &:hover,
    &:focus,
    &:active {
      color: getCssVar('color', $type, 'light-5');
      background-color: getCssVar('color', $type, 'light-9');
      border-color: getCssVar('color', $type, 'light-8');
    }
  }
}

@mixin button-variant($type) {
  $button-color-types: (
    '': (
      'text-color': (
        'color',
        'white'
      ),
      'bg-color': (
        'color',
        $type
      ),
      'border-color': (
        'color',
        $type
      ),
      'outline-color': (
        'color',
        $type,
        'light-5'
      ),
      'active-color': (
        'color',
        $type,
        'dark-2'
      )
    ),
    'hover': (
      'text-color': (
        'color',
        'white'
      ),
      'link-text-color': (
        'color',
        $type,
        'light-5'
      ),
      'bg-color': (
        'color',
        $type,
        'light-3'
      ),
      'border-color': (
        'color',
        $type,
        'light-3'
      )
    ),
    'active': (
      'bg-color': (
        'color',
        $type,
        'dark-2'
      ),
      'border-color': (
        'color',
        $type,
        'dark-2'
      )
    ),
    'disabled': (
      'text-color': (
        'color',
        'white'
      ),
      'bg-color': (
        'color',
        $type,
        'light-5'
      ),
      'border-color': (
        'color',
        $type,
        'light-5'
      )
    )
  );

  @each $type, $typeMap in $button-color-types {
    @each $typeColor, $list in $typeMap {
      @include css-var-from-global(('button', $type, $typeColor), $list);
    }
  }

  &.is-plain,
  &.is-text,
  &.is-link {
    @include button-plain($type);
  }
}

@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

// generate css var from existing css var
// for example:
// @include css-var-from-global(('button', 'text-color'), ('color', $type))
// --el-button-text-color: var(--el-color-#{$type});

// css-var-from-global(('button', 'hover', 'text-color'), ('color', 'primary'));
//  --el-button-hover-text-color: var(--el-color-primary);
@mixin css-var-from-global($var, $gVar) {
  $varName: joinVarName($var);
  $gVarName: joinVarName($gVar);
  #{$varName}: var(#{$gVarName});
}

// https://sass-lang.com/documentation/values/maps#immutability
// mix colors with white/black to generate light/dark level
@mixin set-color-mix-level($type, $number, $mode: 'light', $mix-color: $color-white) {
  $colors: map.deep-merge(
    (
      $type: (
        '#{$mode}-#{$number}': mix($mix-color, map.get($colors, $type, 'base'), math.percentage(math.div($number, 10)))
      )
    ),
    $colors
  ) !global;
}

@mixin set-css-color-rgb($type) {
  $color: map.get($colors, $type, 'base');
  @include set-css-var-value(('color', $type, 'rgb'), #{red($color), green($color), blue($color)});
}

@mixin set-css-color-type($colors, $type) {
  @include set-css-var-value(('color', $type), map.get($colors, $type, 'base'));

  @each $i in (3, 5, 7, 8, 9) {
    @include set-css-var-value(('color', $type, 'light', $i), map.get($colors, $type, 'light-#{$i}'));
  }
  // TODO
  // @include set-css-var-value(('color', $type, 'dark-2'), map.get($colors, $type, 'dark-2'));
}
